// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: canal_data.proto

#include "canal_data.pb.h"
#include "canal_data.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpccommunication {

static const char* SendingImageData_method_names[] = {
  "/grpccommunication.SendingImageData/sendImageData",
};

std::unique_ptr< SendingImageData::Stub> SendingImageData::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SendingImageData::Stub> stub(new SendingImageData::Stub(channel));
  return stub;
}

SendingImageData::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_sendImageData_(SendingImageData_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SendingImageData::Stub::sendImageData(::grpc::ClientContext* context, const ::grpccommunication::ImageDataMessage& request, ::grpccommunication::ServerConfirmation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendImageData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpccommunication::ServerConfirmation>* SendingImageData::Stub::AsyncsendImageDataRaw(::grpc::ClientContext* context, const ::grpccommunication::ImageDataMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpccommunication::ServerConfirmation>::Create(channel_.get(), cq, rpcmethod_sendImageData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpccommunication::ServerConfirmation>* SendingImageData::Stub::PrepareAsyncsendImageDataRaw(::grpc::ClientContext* context, const ::grpccommunication::ImageDataMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpccommunication::ServerConfirmation>::Create(channel_.get(), cq, rpcmethod_sendImageData_, context, request, false);
}

SendingImageData::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SendingImageData_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SendingImageData::Service, ::grpccommunication::ImageDataMessage, ::grpccommunication::ServerConfirmation>(
          std::mem_fn(&SendingImageData::Service::sendImageData), this)));
}

SendingImageData::Service::~Service() {
}

::grpc::Status SendingImageData::Service::sendImageData(::grpc::ServerContext* context, const ::grpccommunication::ImageDataMessage* request, ::grpccommunication::ServerConfirmation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SendingMouseData_method_names[] = {
  "/grpccommunication.SendingMouseData/sendMouseData",
};

std::unique_ptr< SendingMouseData::Stub> SendingMouseData::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SendingMouseData::Stub> stub(new SendingMouseData::Stub(channel));
  return stub;
}

SendingMouseData::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_sendMouseData_(SendingMouseData_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SendingMouseData::Stub::sendMouseData(::grpc::ClientContext* context, const ::grpccommunication::MouseMessage& request, ::grpccommunication::ServerConfirmation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendMouseData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpccommunication::ServerConfirmation>* SendingMouseData::Stub::AsyncsendMouseDataRaw(::grpc::ClientContext* context, const ::grpccommunication::MouseMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpccommunication::ServerConfirmation>::Create(channel_.get(), cq, rpcmethod_sendMouseData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpccommunication::ServerConfirmation>* SendingMouseData::Stub::PrepareAsyncsendMouseDataRaw(::grpc::ClientContext* context, const ::grpccommunication::MouseMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpccommunication::ServerConfirmation>::Create(channel_.get(), cq, rpcmethod_sendMouseData_, context, request, false);
}

SendingMouseData::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SendingMouseData_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SendingMouseData::Service, ::grpccommunication::MouseMessage, ::grpccommunication::ServerConfirmation>(
          std::mem_fn(&SendingMouseData::Service::sendMouseData), this)));
}

SendingMouseData::Service::~Service() {
}

::grpc::Status SendingMouseData::Service::sendMouseData(::grpc::ServerContext* context, const ::grpccommunication::MouseMessage* request, ::grpccommunication::ServerConfirmation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SendingQuakeEvent_method_names[] = {
  "/grpccommunication.SendingQuakeEvent/sendQuakeEventData",
  "/grpccommunication.SendingQuakeEvent/sendInjuryData",
};

std::unique_ptr< SendingQuakeEvent::Stub> SendingQuakeEvent::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SendingQuakeEvent::Stub> stub(new SendingQuakeEvent::Stub(channel));
  return stub;
}

SendingQuakeEvent::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_sendQuakeEventData_(SendingQuakeEvent_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendInjuryData_(SendingQuakeEvent_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SendingQuakeEvent::Stub::sendQuakeEventData(::grpc::ClientContext* context, const ::grpccommunication::QuakeEventMessage& request, ::grpccommunication::ServerConfirmation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendQuakeEventData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpccommunication::ServerConfirmation>* SendingQuakeEvent::Stub::AsyncsendQuakeEventDataRaw(::grpc::ClientContext* context, const ::grpccommunication::QuakeEventMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpccommunication::ServerConfirmation>::Create(channel_.get(), cq, rpcmethod_sendQuakeEventData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpccommunication::ServerConfirmation>* SendingQuakeEvent::Stub::PrepareAsyncsendQuakeEventDataRaw(::grpc::ClientContext* context, const ::grpccommunication::QuakeEventMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpccommunication::ServerConfirmation>::Create(channel_.get(), cq, rpcmethod_sendQuakeEventData_, context, request, false);
}

::grpc::Status SendingQuakeEvent::Stub::sendInjuryData(::grpc::ClientContext* context, const ::grpccommunication::InjuryDataMessage& request, ::grpccommunication::ServerConfirmation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_sendInjuryData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::grpccommunication::ServerConfirmation>* SendingQuakeEvent::Stub::AsyncsendInjuryDataRaw(::grpc::ClientContext* context, const ::grpccommunication::InjuryDataMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpccommunication::ServerConfirmation>::Create(channel_.get(), cq, rpcmethod_sendInjuryData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grpccommunication::ServerConfirmation>* SendingQuakeEvent::Stub::PrepareAsyncsendInjuryDataRaw(::grpc::ClientContext* context, const ::grpccommunication::InjuryDataMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grpccommunication::ServerConfirmation>::Create(channel_.get(), cq, rpcmethod_sendInjuryData_, context, request, false);
}

SendingQuakeEvent::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SendingQuakeEvent_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SendingQuakeEvent::Service, ::grpccommunication::QuakeEventMessage, ::grpccommunication::ServerConfirmation>(
          std::mem_fn(&SendingQuakeEvent::Service::sendQuakeEventData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SendingQuakeEvent_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SendingQuakeEvent::Service, ::grpccommunication::InjuryDataMessage, ::grpccommunication::ServerConfirmation>(
          std::mem_fn(&SendingQuakeEvent::Service::sendInjuryData), this)));
}

SendingQuakeEvent::Service::~Service() {
}

::grpc::Status SendingQuakeEvent::Service::sendQuakeEventData(::grpc::ServerContext* context, const ::grpccommunication::QuakeEventMessage* request, ::grpccommunication::ServerConfirmation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SendingQuakeEvent::Service::sendInjuryData(::grpc::ServerContext* context, const ::grpccommunication::InjuryDataMessage* request, ::grpccommunication::ServerConfirmation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpccommunication

