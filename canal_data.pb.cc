// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: canal_data.proto

#include "canal_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace grpccommunication {
class ImageDataMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageDataMessage>
      _instance;
} _ImageDataMessage_default_instance_;
class MouseMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MouseMessage>
      _instance;
} _MouseMessage_default_instance_;
class MouseButtonMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MouseButtonMessage>
      _instance;
} _MouseButtonMessage_default_instance_;
class InjuryDataMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InjuryDataMessage>
      _instance;
} _InjuryDataMessage_default_instance_;
class QuakeEventMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuakeEventMessage>
      _instance;
} _QuakeEventMessage_default_instance_;
class ServerConfirmationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerConfirmation>
      _instance;
} _ServerConfirmation_default_instance_;
}  // namespace grpccommunication
namespace protobuf_canal_5fdata_2eproto {
void InitDefaultsImageDataMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::grpccommunication::_ImageDataMessage_default_instance_;
    new (ptr) ::grpccommunication::ImageDataMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpccommunication::ImageDataMessage::InitAsDefaultInstance();
}

void InitDefaultsImageDataMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImageDataMessageImpl);
}

void InitDefaultsMouseMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::grpccommunication::_MouseMessage_default_instance_;
    new (ptr) ::grpccommunication::MouseMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpccommunication::MouseMessage::InitAsDefaultInstance();
}

void InitDefaultsMouseMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMouseMessageImpl);
}

void InitDefaultsMouseButtonMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::grpccommunication::_MouseButtonMessage_default_instance_;
    new (ptr) ::grpccommunication::MouseButtonMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpccommunication::MouseButtonMessage::InitAsDefaultInstance();
}

void InitDefaultsMouseButtonMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMouseButtonMessageImpl);
}

void InitDefaultsInjuryDataMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::grpccommunication::_InjuryDataMessage_default_instance_;
    new (ptr) ::grpccommunication::InjuryDataMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpccommunication::InjuryDataMessage::InitAsDefaultInstance();
}

void InitDefaultsInjuryDataMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInjuryDataMessageImpl);
}

void InitDefaultsQuakeEventMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::grpccommunication::_QuakeEventMessage_default_instance_;
    new (ptr) ::grpccommunication::QuakeEventMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpccommunication::QuakeEventMessage::InitAsDefaultInstance();
}

void InitDefaultsQuakeEventMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuakeEventMessageImpl);
}

void InitDefaultsServerConfirmationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::grpccommunication::_ServerConfirmation_default_instance_;
    new (ptr) ::grpccommunication::ServerConfirmation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::grpccommunication::ServerConfirmation::InitAsDefaultInstance();
}

void InitDefaultsServerConfirmation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServerConfirmationImpl);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::ImageDataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::ImageDataMessage, negative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::ImageDataMessage, neutral_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::ImageDataMessage, positive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::ImageDataMessage, black_screen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::ImageDataMessage, image_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::MouseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::MouseMessage, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::MouseMessage, move_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::MouseMessage, move_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::MouseButtonMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::MouseButtonMessage, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::MouseButtonMessage, move_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::MouseButtonMessage, move_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::InjuryDataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::InjuryDataMessage, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::InjuryDataMessage, injury_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::InjuryDataMessage, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::InjuryDataMessage, new_hp_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::QuakeEventMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::QuakeEventMessage, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::QuakeEventMessage, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::QuakeEventMessage, player_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::ServerConfirmation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::grpccommunication::ServerConfirmation, confirm_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpccommunication::ImageDataMessage)},
  { 10, -1, sizeof(::grpccommunication::MouseMessage)},
  { 18, -1, sizeof(::grpccommunication::MouseButtonMessage)},
  { 26, -1, sizeof(::grpccommunication::InjuryDataMessage)},
  { 35, -1, sizeof(::grpccommunication::QuakeEventMessage)},
  { 43, -1, sizeof(::grpccommunication::ServerConfirmation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpccommunication::_ImageDataMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpccommunication::_MouseMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpccommunication::_MouseButtonMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpccommunication::_InjuryDataMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpccommunication::_QuakeEventMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::grpccommunication::_ServerConfirmation_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "canal_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020canal_data.proto\022\021grpccommunication\"q\n"
      "\020ImageDataMessage\022\020\n\010negative\030\001 \001(\010\022\017\n\007n"
      "eutral\030\002 \001(\010\022\020\n\010positive\030\003 \001(\010\022\024\n\014black_"
      "screen\030\004 \001(\010\022\022\n\nimage_name\030\005 \001(\014\"A\n\014Mous"
      "eMessage\022\021\n\ttimestamp\030\001 \001(\003\022\016\n\006move_x\030\002 "
      "\001(\005\022\016\n\006move_y\030\003 \001(\005\"G\n\022MouseButtonMessag"
      "e\022\021\n\ttimestamp\030\001 \001(\003\022\016\n\006move_x\030\002 \001(\005\022\016\n\006"
      "move_y\030\003 \001(\005\"b\n\021InjuryDataMessage\022\021\n\ttim"
      "estamp\030\001 \001(\003\022\021\n\tinjury_id\030\002 \001(\005\022\021\n\tplaye"
      "r_id\030\003 \001(\005\022\024\n\014new_hp_value\030\004 \001(\005\"K\n\021Quak"
      "eEventMessage\022\021\n\ttimestamp\030\001 \001(\003\022\020\n\010even"
      "t_id\030\002 \001(\005\022\021\n\tplayer_id\030\003 \001(\005\"%\n\022ServerC"
      "onfirmation\022\017\n\007confirm\030\001 \001(\0142q\n\020SendingI"
      "mageData\022]\n\rsendImageData\022#.grpccommunic"
      "ation.ImageDataMessage\032%.grpccommunicati"
      "on.ServerConfirmation\"\0002m\n\020SendingMouseD"
      "ata\022Y\n\rsendMouseData\022\037.grpccommunication"
      ".MouseMessage\032%.grpccommunication.Server"
      "Confirmation\"\0002\331\001\n\021SendingQuakeEvent\022c\n\022"
      "sendQuakeEventData\022$.grpccommunication.Q"
      "uakeEventMessage\032%.grpccommunication.Ser"
      "verConfirmation\"\000\022_\n\016sendInjuryData\022$.gr"
      "pccommunication.InjuryDataMessage\032%.grpc"
      "communication.ServerConfirmation\"\000B:\n\034io"
      ".grpc.examples.imageviewerB\022SendingImage"
      "sProtoP\001\242\002\003HLWb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1022);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "canal_data.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_canal_5fdata_2eproto
namespace grpccommunication {

// ===================================================================

void ImageDataMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDataMessage::kNegativeFieldNumber;
const int ImageDataMessage::kNeutralFieldNumber;
const int ImageDataMessage::kPositiveFieldNumber;
const int ImageDataMessage::kBlackScreenFieldNumber;
const int ImageDataMessage::kImageNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDataMessage::ImageDataMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_canal_5fdata_2eproto::InitDefaultsImageDataMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpccommunication.ImageDataMessage)
}
ImageDataMessage::ImageDataMessage(const ImageDataMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_name().size() > 0) {
    image_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_name_);
  }
  ::memcpy(&negative_, &from.negative_,
    static_cast<size_t>(reinterpret_cast<char*>(&black_screen_) -
    reinterpret_cast<char*>(&negative_)) + sizeof(black_screen_));
  // @@protoc_insertion_point(copy_constructor:grpccommunication.ImageDataMessage)
}

void ImageDataMessage::SharedCtor() {
  image_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&negative_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&black_screen_) -
      reinterpret_cast<char*>(&negative_)) + sizeof(black_screen_));
  _cached_size_ = 0;
}

ImageDataMessage::~ImageDataMessage() {
  // @@protoc_insertion_point(destructor:grpccommunication.ImageDataMessage)
  SharedDtor();
}

void ImageDataMessage::SharedDtor() {
  image_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDataMessage::descriptor() {
  ::protobuf_canal_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_canal_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageDataMessage& ImageDataMessage::default_instance() {
  ::protobuf_canal_5fdata_2eproto::InitDefaultsImageDataMessage();
  return *internal_default_instance();
}

ImageDataMessage* ImageDataMessage::New(::google::protobuf::Arena* arena) const {
  ImageDataMessage* n = new ImageDataMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:grpccommunication.ImageDataMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&negative_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&black_screen_) -
      reinterpret_cast<char*>(&negative_)) + sizeof(black_screen_));
  _internal_metadata_.Clear();
}

bool ImageDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpccommunication.ImageDataMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool negative = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool neutral = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &neutral_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool positive = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &positive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool black_screen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &black_screen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes image_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpccommunication.ImageDataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpccommunication.ImageDataMessage)
  return false;
#undef DO_
}

void ImageDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpccommunication.ImageDataMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool negative = 1;
  if (this->negative() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->negative(), output);
  }

  // bool neutral = 2;
  if (this->neutral() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->neutral(), output);
  }

  // bool positive = 3;
  if (this->positive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->positive(), output);
  }

  // bool black_screen = 4;
  if (this->black_screen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->black_screen(), output);
  }

  // bytes image_name = 5;
  if (this->image_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->image_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpccommunication.ImageDataMessage)
}

::google::protobuf::uint8* ImageDataMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpccommunication.ImageDataMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool negative = 1;
  if (this->negative() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->negative(), target);
  }

  // bool neutral = 2;
  if (this->neutral() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->neutral(), target);
  }

  // bool positive = 3;
  if (this->positive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->positive(), target);
  }

  // bool black_screen = 4;
  if (this->black_screen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->black_screen(), target);
  }

  // bytes image_name = 5;
  if (this->image_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->image_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpccommunication.ImageDataMessage)
  return target;
}

size_t ImageDataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpccommunication.ImageDataMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes image_name = 5;
  if (this->image_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image_name());
  }

  // bool negative = 1;
  if (this->negative() != 0) {
    total_size += 1 + 1;
  }

  // bool neutral = 2;
  if (this->neutral() != 0) {
    total_size += 1 + 1;
  }

  // bool positive = 3;
  if (this->positive() != 0) {
    total_size += 1 + 1;
  }

  // bool black_screen = 4;
  if (this->black_screen() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDataMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpccommunication.ImageDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageDataMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageDataMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpccommunication.ImageDataMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpccommunication.ImageDataMessage)
    MergeFrom(*source);
  }
}

void ImageDataMessage::MergeFrom(const ImageDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpccommunication.ImageDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_name().size() > 0) {

    image_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_name_);
  }
  if (from.negative() != 0) {
    set_negative(from.negative());
  }
  if (from.neutral() != 0) {
    set_neutral(from.neutral());
  }
  if (from.positive() != 0) {
    set_positive(from.positive());
  }
  if (from.black_screen() != 0) {
    set_black_screen(from.black_screen());
  }
}

void ImageDataMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpccommunication.ImageDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDataMessage::CopyFrom(const ImageDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpccommunication.ImageDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataMessage::IsInitialized() const {
  return true;
}

void ImageDataMessage::Swap(ImageDataMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDataMessage::InternalSwap(ImageDataMessage* other) {
  using std::swap;
  image_name_.Swap(&other->image_name_);
  swap(negative_, other->negative_);
  swap(neutral_, other->neutral_);
  swap(positive_, other->positive_);
  swap(black_screen_, other->black_screen_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageDataMessage::GetMetadata() const {
  protobuf_canal_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_canal_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MouseMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MouseMessage::kTimestampFieldNumber;
const int MouseMessage::kMoveXFieldNumber;
const int MouseMessage::kMoveYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MouseMessage::MouseMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_canal_5fdata_2eproto::InitDefaultsMouseMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpccommunication.MouseMessage)
}
MouseMessage::MouseMessage(const MouseMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&move_y_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(move_y_));
  // @@protoc_insertion_point(copy_constructor:grpccommunication.MouseMessage)
}

void MouseMessage::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&move_y_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(move_y_));
  _cached_size_ = 0;
}

MouseMessage::~MouseMessage() {
  // @@protoc_insertion_point(destructor:grpccommunication.MouseMessage)
  SharedDtor();
}

void MouseMessage::SharedDtor() {
}

void MouseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MouseMessage::descriptor() {
  ::protobuf_canal_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_canal_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MouseMessage& MouseMessage::default_instance() {
  ::protobuf_canal_5fdata_2eproto::InitDefaultsMouseMessage();
  return *internal_default_instance();
}

MouseMessage* MouseMessage::New(::google::protobuf::Arena* arena) const {
  MouseMessage* n = new MouseMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MouseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:grpccommunication.MouseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&move_y_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(move_y_));
  _internal_metadata_.Clear();
}

bool MouseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpccommunication.MouseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 move_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 move_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpccommunication.MouseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpccommunication.MouseMessage)
  return false;
#undef DO_
}

void MouseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpccommunication.MouseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // int32 move_x = 2;
  if (this->move_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->move_x(), output);
  }

  // int32 move_y = 3;
  if (this->move_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->move_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpccommunication.MouseMessage)
}

::google::protobuf::uint8* MouseMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpccommunication.MouseMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // int32 move_x = 2;
  if (this->move_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->move_x(), target);
  }

  // int32 move_y = 3;
  if (this->move_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->move_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpccommunication.MouseMessage)
  return target;
}

size_t MouseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpccommunication.MouseMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 move_x = 2;
  if (this->move_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_x());
  }

  // int32 move_y = 3;
  if (this->move_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MouseMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpccommunication.MouseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MouseMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MouseMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpccommunication.MouseMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpccommunication.MouseMessage)
    MergeFrom(*source);
  }
}

void MouseMessage::MergeFrom(const MouseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpccommunication.MouseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.move_x() != 0) {
    set_move_x(from.move_x());
  }
  if (from.move_y() != 0) {
    set_move_y(from.move_y());
  }
}

void MouseMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpccommunication.MouseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseMessage::CopyFrom(const MouseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpccommunication.MouseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseMessage::IsInitialized() const {
  return true;
}

void MouseMessage::Swap(MouseMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MouseMessage::InternalSwap(MouseMessage* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(move_x_, other->move_x_);
  swap(move_y_, other->move_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MouseMessage::GetMetadata() const {
  protobuf_canal_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_canal_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MouseButtonMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MouseButtonMessage::kTimestampFieldNumber;
const int MouseButtonMessage::kMoveXFieldNumber;
const int MouseButtonMessage::kMoveYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MouseButtonMessage::MouseButtonMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_canal_5fdata_2eproto::InitDefaultsMouseButtonMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpccommunication.MouseButtonMessage)
}
MouseButtonMessage::MouseButtonMessage(const MouseButtonMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&move_y_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(move_y_));
  // @@protoc_insertion_point(copy_constructor:grpccommunication.MouseButtonMessage)
}

void MouseButtonMessage::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&move_y_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(move_y_));
  _cached_size_ = 0;
}

MouseButtonMessage::~MouseButtonMessage() {
  // @@protoc_insertion_point(destructor:grpccommunication.MouseButtonMessage)
  SharedDtor();
}

void MouseButtonMessage::SharedDtor() {
}

void MouseButtonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MouseButtonMessage::descriptor() {
  ::protobuf_canal_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_canal_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MouseButtonMessage& MouseButtonMessage::default_instance() {
  ::protobuf_canal_5fdata_2eproto::InitDefaultsMouseButtonMessage();
  return *internal_default_instance();
}

MouseButtonMessage* MouseButtonMessage::New(::google::protobuf::Arena* arena) const {
  MouseButtonMessage* n = new MouseButtonMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MouseButtonMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:grpccommunication.MouseButtonMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&move_y_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(move_y_));
  _internal_metadata_.Clear();
}

bool MouseButtonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpccommunication.MouseButtonMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 move_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 move_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpccommunication.MouseButtonMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpccommunication.MouseButtonMessage)
  return false;
#undef DO_
}

void MouseButtonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpccommunication.MouseButtonMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // int32 move_x = 2;
  if (this->move_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->move_x(), output);
  }

  // int32 move_y = 3;
  if (this->move_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->move_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpccommunication.MouseButtonMessage)
}

::google::protobuf::uint8* MouseButtonMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpccommunication.MouseButtonMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // int32 move_x = 2;
  if (this->move_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->move_x(), target);
  }

  // int32 move_y = 3;
  if (this->move_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->move_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpccommunication.MouseButtonMessage)
  return target;
}

size_t MouseButtonMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpccommunication.MouseButtonMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 move_x = 2;
  if (this->move_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_x());
  }

  // int32 move_y = 3;
  if (this->move_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->move_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MouseButtonMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpccommunication.MouseButtonMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MouseButtonMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MouseButtonMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpccommunication.MouseButtonMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpccommunication.MouseButtonMessage)
    MergeFrom(*source);
  }
}

void MouseButtonMessage::MergeFrom(const MouseButtonMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpccommunication.MouseButtonMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.move_x() != 0) {
    set_move_x(from.move_x());
  }
  if (from.move_y() != 0) {
    set_move_y(from.move_y());
  }
}

void MouseButtonMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpccommunication.MouseButtonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseButtonMessage::CopyFrom(const MouseButtonMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpccommunication.MouseButtonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseButtonMessage::IsInitialized() const {
  return true;
}

void MouseButtonMessage::Swap(MouseButtonMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MouseButtonMessage::InternalSwap(MouseButtonMessage* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(move_x_, other->move_x_);
  swap(move_y_, other->move_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MouseButtonMessage::GetMetadata() const {
  protobuf_canal_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_canal_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InjuryDataMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InjuryDataMessage::kTimestampFieldNumber;
const int InjuryDataMessage::kInjuryIdFieldNumber;
const int InjuryDataMessage::kPlayerIdFieldNumber;
const int InjuryDataMessage::kNewHpValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InjuryDataMessage::InjuryDataMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_canal_5fdata_2eproto::InitDefaultsInjuryDataMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpccommunication.InjuryDataMessage)
}
InjuryDataMessage::InjuryDataMessage(const InjuryDataMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_hp_value_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(new_hp_value_));
  // @@protoc_insertion_point(copy_constructor:grpccommunication.InjuryDataMessage)
}

void InjuryDataMessage::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_hp_value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(new_hp_value_));
  _cached_size_ = 0;
}

InjuryDataMessage::~InjuryDataMessage() {
  // @@protoc_insertion_point(destructor:grpccommunication.InjuryDataMessage)
  SharedDtor();
}

void InjuryDataMessage::SharedDtor() {
}

void InjuryDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InjuryDataMessage::descriptor() {
  ::protobuf_canal_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_canal_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InjuryDataMessage& InjuryDataMessage::default_instance() {
  ::protobuf_canal_5fdata_2eproto::InitDefaultsInjuryDataMessage();
  return *internal_default_instance();
}

InjuryDataMessage* InjuryDataMessage::New(::google::protobuf::Arena* arena) const {
  InjuryDataMessage* n = new InjuryDataMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InjuryDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:grpccommunication.InjuryDataMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_hp_value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(new_hp_value_));
  _internal_metadata_.Clear();
}

bool InjuryDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpccommunication.InjuryDataMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 injury_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &injury_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 new_hp_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_hp_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpccommunication.InjuryDataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpccommunication.InjuryDataMessage)
  return false;
#undef DO_
}

void InjuryDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpccommunication.InjuryDataMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // int32 injury_id = 2;
  if (this->injury_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->injury_id(), output);
  }

  // int32 player_id = 3;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  // int32 new_hp_value = 4;
  if (this->new_hp_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->new_hp_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpccommunication.InjuryDataMessage)
}

::google::protobuf::uint8* InjuryDataMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpccommunication.InjuryDataMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // int32 injury_id = 2;
  if (this->injury_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->injury_id(), target);
  }

  // int32 player_id = 3;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  // int32 new_hp_value = 4;
  if (this->new_hp_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->new_hp_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpccommunication.InjuryDataMessage)
  return target;
}

size_t InjuryDataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpccommunication.InjuryDataMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 injury_id = 2;
  if (this->injury_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->injury_id());
  }

  // int32 player_id = 3;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());
  }

  // int32 new_hp_value = 4;
  if (this->new_hp_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->new_hp_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InjuryDataMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpccommunication.InjuryDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const InjuryDataMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InjuryDataMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpccommunication.InjuryDataMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpccommunication.InjuryDataMessage)
    MergeFrom(*source);
  }
}

void InjuryDataMessage::MergeFrom(const InjuryDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpccommunication.InjuryDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.injury_id() != 0) {
    set_injury_id(from.injury_id());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.new_hp_value() != 0) {
    set_new_hp_value(from.new_hp_value());
  }
}

void InjuryDataMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpccommunication.InjuryDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InjuryDataMessage::CopyFrom(const InjuryDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpccommunication.InjuryDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InjuryDataMessage::IsInitialized() const {
  return true;
}

void InjuryDataMessage::Swap(InjuryDataMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InjuryDataMessage::InternalSwap(InjuryDataMessage* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(injury_id_, other->injury_id_);
  swap(player_id_, other->player_id_);
  swap(new_hp_value_, other->new_hp_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InjuryDataMessage::GetMetadata() const {
  protobuf_canal_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_canal_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QuakeEventMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuakeEventMessage::kTimestampFieldNumber;
const int QuakeEventMessage::kEventIdFieldNumber;
const int QuakeEventMessage::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuakeEventMessage::QuakeEventMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_canal_5fdata_2eproto::InitDefaultsQuakeEventMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpccommunication.QuakeEventMessage)
}
QuakeEventMessage::QuakeEventMessage(const QuakeEventMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:grpccommunication.QuakeEventMessage)
}

void QuakeEventMessage::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(player_id_));
  _cached_size_ = 0;
}

QuakeEventMessage::~QuakeEventMessage() {
  // @@protoc_insertion_point(destructor:grpccommunication.QuakeEventMessage)
  SharedDtor();
}

void QuakeEventMessage::SharedDtor() {
}

void QuakeEventMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuakeEventMessage::descriptor() {
  ::protobuf_canal_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_canal_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuakeEventMessage& QuakeEventMessage::default_instance() {
  ::protobuf_canal_5fdata_2eproto::InitDefaultsQuakeEventMessage();
  return *internal_default_instance();
}

QuakeEventMessage* QuakeEventMessage::New(::google::protobuf::Arena* arena) const {
  QuakeEventMessage* n = new QuakeEventMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuakeEventMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:grpccommunication.QuakeEventMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(player_id_));
  _internal_metadata_.Clear();
}

bool QuakeEventMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpccommunication.QuakeEventMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 event_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpccommunication.QuakeEventMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpccommunication.QuakeEventMessage)
  return false;
#undef DO_
}

void QuakeEventMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpccommunication.QuakeEventMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // int32 event_id = 2;
  if (this->event_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_id(), output);
  }

  // int32 player_id = 3;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpccommunication.QuakeEventMessage)
}

::google::protobuf::uint8* QuakeEventMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpccommunication.QuakeEventMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // int32 event_id = 2;
  if (this->event_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_id(), target);
  }

  // int32 player_id = 3;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpccommunication.QuakeEventMessage)
  return target;
}

size_t QuakeEventMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpccommunication.QuakeEventMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 event_id = 2;
  if (this->event_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->event_id());
  }

  // int32 player_id = 3;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuakeEventMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpccommunication.QuakeEventMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const QuakeEventMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuakeEventMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpccommunication.QuakeEventMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpccommunication.QuakeEventMessage)
    MergeFrom(*source);
  }
}

void QuakeEventMessage::MergeFrom(const QuakeEventMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpccommunication.QuakeEventMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.event_id() != 0) {
    set_event_id(from.event_id());
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
}

void QuakeEventMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpccommunication.QuakeEventMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuakeEventMessage::CopyFrom(const QuakeEventMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpccommunication.QuakeEventMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuakeEventMessage::IsInitialized() const {
  return true;
}

void QuakeEventMessage::Swap(QuakeEventMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuakeEventMessage::InternalSwap(QuakeEventMessage* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(event_id_, other->event_id_);
  swap(player_id_, other->player_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuakeEventMessage::GetMetadata() const {
  protobuf_canal_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_canal_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerConfirmation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerConfirmation::kConfirmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerConfirmation::ServerConfirmation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_canal_5fdata_2eproto::InitDefaultsServerConfirmation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:grpccommunication.ServerConfirmation)
}
ServerConfirmation::ServerConfirmation(const ServerConfirmation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  confirm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.confirm().size() > 0) {
    confirm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_);
  }
  // @@protoc_insertion_point(copy_constructor:grpccommunication.ServerConfirmation)
}

void ServerConfirmation::SharedCtor() {
  confirm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ServerConfirmation::~ServerConfirmation() {
  // @@protoc_insertion_point(destructor:grpccommunication.ServerConfirmation)
  SharedDtor();
}

void ServerConfirmation::SharedDtor() {
  confirm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerConfirmation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfirmation::descriptor() {
  ::protobuf_canal_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_canal_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerConfirmation& ServerConfirmation::default_instance() {
  ::protobuf_canal_5fdata_2eproto::InitDefaultsServerConfirmation();
  return *internal_default_instance();
}

ServerConfirmation* ServerConfirmation::New(::google::protobuf::Arena* arena) const {
  ServerConfirmation* n = new ServerConfirmation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerConfirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:grpccommunication.ServerConfirmation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  confirm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ServerConfirmation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grpccommunication.ServerConfirmation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes confirm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_confirm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grpccommunication.ServerConfirmation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grpccommunication.ServerConfirmation)
  return false;
#undef DO_
}

void ServerConfirmation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grpccommunication.ServerConfirmation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes confirm = 1;
  if (this->confirm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->confirm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:grpccommunication.ServerConfirmation)
}

::google::protobuf::uint8* ServerConfirmation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:grpccommunication.ServerConfirmation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes confirm = 1;
  if (this->confirm().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->confirm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpccommunication.ServerConfirmation)
  return target;
}

size_t ServerConfirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpccommunication.ServerConfirmation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes confirm = 1;
  if (this->confirm().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->confirm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfirmation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpccommunication.ServerConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerConfirmation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerConfirmation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpccommunication.ServerConfirmation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpccommunication.ServerConfirmation)
    MergeFrom(*source);
  }
}

void ServerConfirmation::MergeFrom(const ServerConfirmation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpccommunication.ServerConfirmation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confirm().size() > 0) {

    confirm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.confirm_);
  }
}

void ServerConfirmation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpccommunication.ServerConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfirmation::CopyFrom(const ServerConfirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpccommunication.ServerConfirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfirmation::IsInitialized() const {
  return true;
}

void ServerConfirmation::Swap(ServerConfirmation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerConfirmation::InternalSwap(ServerConfirmation* other) {
  using std::swap;
  confirm_.Swap(&other->confirm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerConfirmation::GetMetadata() const {
  protobuf_canal_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_canal_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpccommunication

// @@protoc_insertion_point(global_scope)
